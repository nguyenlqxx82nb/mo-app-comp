import { PureComponent } from 'react';
export interface FormEditProps {
    label?: string;
    value?: string;
    validRequire?: boolean;
    emptyErrorMessage?: string;
    placeholder?: string;
    editStatus?: string;
    readOnly?: boolean;
    inputStyle?: any;
    formatType?: 'column' | 'row';
    editType: 'Input' | 'Dropdown' | 'Datepicker' | 'CCD';
    isUpdateType?: boolean;
    data?: Array<any>;
    item?: any;
    selectLabel?: string;
    validType?: 'text' | 'email' | 'phone' | 'number';
    onUpdate?: any;
    containerStyle: any;
    width?: number;
    dropdownLabel?: string;
    numberOfLines?: number;
    multiLine?: boolean;
    fieldType?: string;
    selectedKey?: string;
    items?: Array<any>;
    autoValidate?: boolean;
    enable?: boolean;
    onOpenDatepicker?: any;
    icon?: string;
    isPassword?: boolean;
}
export declare class FormEdit extends PureComponent<FormEditProps, any> {
    static defaultProps: {
        label: string;
        value: string;
        validRequire: boolean;
        emptyErrorMessage: string;
        placeholder: string;
        editStatus: boolean;
        readOnly: boolean;
        inputStyle: {};
        formatType: string;
        editType: string;
        isUpdateType: boolean;
        data: any[];
        item: any;
        selectLabel: string;
        validType: string;
        onUpdate: () => any;
        containerStyle: {};
        width: number;
        marginLeft: number;
        dropdownLabel: string;
        numberOfLines: number;
        multiLine: boolean;
        fieldType: string;
        selectedKey: string;
        items: any[];
        autoValidate: boolean;
    };
    _item: any;
    inputEditRef: any;
    formEditRef: any;
    constructor(props: FormEditProps);
    UNSAFE_componentWillReceiveProps(nextProps: any): void;
    changeEditStatus: (editStatus: boolean) => void;
    getValue: () => any;
    getValueByKey: () => any;
    getSelectedItem: () => any;
    setValue: (value: any) => void;
    getDisplayValue: () => any;
    validate: () => any;
    setData: (data: any) => void;
    getLabel: () => string;
    onCityPressHandler: () => void;
    onSelectItemHandler: (selectedKey: any) => void;
    hideKeyboard: () => void;
    render(): JSX.Element;
}
