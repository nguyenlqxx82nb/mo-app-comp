import React from 'react';
import { BaseServiceParam, BaseService } from '../../services/BaseService';
import PropTypes from 'prop-types';
declare class ListView extends React.PureComponent<any, any> {
    static propTypes: {
        wr: PropTypes.Requireable<number>;
        hr: PropTypes.Requireable<number>;
        pageSize: PropTypes.Requireable<number>;
        autoH: PropTypes.Requireable<boolean>;
        onRenderRow: PropTypes.Requireable<(...args: any[]) => any>;
        onLoadMore: PropTypes.Requireable<(...args: any[]) => any>;
        onLoad: PropTypes.Requireable<(...args: any[]) => any>;
        onScroll: PropTypes.Requireable<(...args: any[]) => any>;
        top: PropTypes.Requireable<number>;
        bottom: PropTypes.Requireable<number>;
        containerStyle: PropTypes.Requireable<object>;
        headerPaddingTop: PropTypes.Requireable<boolean>;
        showLoading: PropTypes.Requireable<boolean>;
        startPage: PropTypes.Requireable<number>;
        noneItemsMsg: PropTypes.Requireable<string>;
        hasRefreshControl: PropTypes.Requireable<boolean>;
        externalScroll: PropTypes.Requireable<boolean>;
        hasExtendedState: PropTypes.Requireable<boolean>;
        onRefreshControl: PropTypes.Requireable<(...args: any[]) => any>;
        maxActive: PropTypes.Requireable<number>;
        autoLoad: PropTypes.Requireable<boolean>;
        items: PropTypes.Requireable<any[]>;
        searchItemEmptyMessage: PropTypes.Requireable<string>;
        icon: PropTypes.Requireable<string>;
        loadAllMessage: PropTypes.Requireable<string>;
    };
    static defaultProps: {
        wr: number;
        hr: number;
        pageSize: number;
        autoH: boolean;
        top: number;
        containerStyle: {};
        headerPaddingTop: boolean;
        showLoading: boolean;
        startPage: number;
        noneItemsMsg: string;
        searchItemEmptyMessage: string;
        hasRefreshControl: boolean;
        externalScroll: boolean;
        hasExtendedState: boolean;
        bottom: number;
        maxActive: number;
        autoLoad: boolean;
        items: any[];
        icon: string;
    };
    currPage: number;
    currSearch: string;
    service: BaseService;
    _page: number;
    _lastCursor: any;
    _layoutProvider: any;
    _listView: any;
    _indicator: any;
    scrollView: any;
    afterToken: string;
    constructor(props: any);
    componentDidMount(): void;
    loadData: () => void;
    fetchData: () => Promise<void>;
    onLoadCompletedHandler: (items: Array<any>, lastCursor?: any) => void;
    fetchMoreData: () => Promise<void>;
    onLoadMoreCompleted: (moreItems: Array<any>, lastCursor?: any) => void;
    buildPaging: (params: BaseServiceParam) => any;
    setData: (items: Array<any>) => void;
    refreshData: () => void;
    performSearch: (searchValue: string) => void;
    updateServiceParam: (service: any, isReset: boolean) => void;
    updateItem: (item: any, index: number) => void;
    addItem: (item: any) => void;
    removeItems: (ids: Array<string>) => void;
    getItem: (index: number) => any;
    toggleActive: (index: number) => void;
    checkOutOfLimitActive: (items: Array<any>) => any[];
    updateActiveIndex: (items: Array<any>) => any[];
    getActiveItems: () => any[];
    deactivateAllItems: () => void;
    checkDataEmpty: () => boolean;
    checkAllItems: () => void;
    updateAllItems: (key: string, value: any) => void;
    getItemCount: () => any;
    scrollToIndex: (index: number, animated: any) => void;
    scrollTop: () => void;
    setSearchValue: (_searchValue: string) => void;
    hasDiffSearch: (searchValue: string) => boolean;
    _rowRenderer: (type: any, item: any, index: number) => any;
    _renderFooter: () => JSX.Element;
    _onEndReachedHandler: () => void;
    _onScrollHandler: (_rawEvent: any, offsetX: number, offsetY: number) => void;
    render(): JSX.Element;
    _renderScroll: (props: any) => JSX.Element;
}
export default ListView;
